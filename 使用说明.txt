以下是根据程序模块编写的使用说明：

### 1. 环境准备
- 确保您的系统已安装Python环境。
- 安装所需的第三方库，包括`ccxt`、`numpy`、`pandas`、`pymysql`等。
- 配置MySQL数据库，并确保数据库用户具有创建、选择和插入权限。
- 配置OKX交易所API，获取`api_key`、`secret_key`和`passphrase`。

### 2. 配置文件和数据库
- 在MySQL数据库中创建所需的数据库和表，或确保程序有足够的权限自动创建。
- 配置`global_vars.py`中的全局变量，如日志表名和实时数据表名。
- 配置`mymail.py`中的邮件发送参数，以便在出现错误时发送通知邮件。

### 3. 启动程序
- 运行`main.py`作为程序的入口点。
- 程序将自动启动日志管理线程、实时数据管理线程、策略管理线程和开关线程。

### 4. 日志管理
- 使用`logs.py`模块中的`LogQueue`类来记录日志信息。
- 日志管理线程（`logs_manager_thread.py`）会定期将日志队列中的记录同步到MySQL数据库。

### 5. 实时数据处理
- 实时数据管理线程（`real_time_data_manager_thread.py`）会定期将实时数据队列中的数据同步到MySQL数据库。

### 6. 交易策略执行
- `strategy_manager_thread.py`是交易策略的核心，它会根据市场数据执行开仓、平仓等操作。
- 策略会根据`strategy.py`中定义的信号生成函数来确定开多仓和开空仓的时机。

### 7. 数据获取和存储
- 使用`getdata.py`中的函数来获取K线数据和其他市场数据，并存储到MySQL数据库。

### 8. 程序开关控制
- `switch_thread.py`会定期检查MySQL数据库中的'switch'表的值，以控制程序的运行状态。
- 当'switch'表的值为0时，程序将停止运行；当值为1时，程序继续运行。

### 9. 错误处理和通知
- 如果程序出现错误，`mymail.py`中的`send_email`函数会发送邮件通知。

### 10. 参数调整和优化
- 根据实际交易情况，调整`function.py`中的参数，以优化交易策略的性能。

### 注意事项
- 确保网络连接稳定，特别是在需要访问OKX交易所API时。
- 定期检查MySQL数据库的运行状态和数据完整性。
- 监控程序的日志输出，以便及时发现和解决问题。

请根据上述说明操作程序，并根据实际需求进行适当的调整和优化。
